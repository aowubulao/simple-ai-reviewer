package io.github.aowubulao.simpleaireviewer.service

import com.intellij.openapi.application.ApplicationManager
import com.intellij.openapi.fileEditor.FileEditorManager
import com.intellij.openapi.project.Project
import com.intellij.testFramework.LightVirtualFile
import org.commonmark.parser.Parser
import org.commonmark.renderer.html.HtmlRenderer
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

class ReviewReportGenerator(private val project: Project) {

    private val markdownParser = Parser.builder().build()
    private val htmlRenderer = HtmlRenderer.builder().build()

    data class ReviewReport(
        val markdown: String,
        val html: String,
        val timestamp: String,
        val summary: String
    )

    fun generateReport(
        aiReview: String,
        codeChanges: CodeAnalyzer.CodeChanges,
        commitMessage: String?,
        repositoryInfo: String?
    ): ReviewReport {

        val timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))

        val markdownContent = buildMarkdownReport(
            aiReview = aiReview,
            codeChanges = codeChanges,
            commitMessage = commitMessage,
            repositoryInfo = repositoryInfo,
            timestamp = timestamp
        )

        // Convert markdown to HTML
        val document = markdownParser.parse(markdownContent)
        val htmlContent = htmlRenderer.render(document)

        val summary = extractSummary(aiReview)

        return ReviewReport(
            markdown = markdownContent,
            html = wrapHtmlWithStyles(htmlContent),
            timestamp = timestamp,
            summary = summary
        )
    }

    private fun buildMarkdownReport(
        aiReview: String,
        codeChanges: CodeAnalyzer.CodeChanges,
        commitMessage: String?,
        repositoryInfo: String?,
        timestamp: String
    ): String {
        val report = StringBuilder()

        report.append("# AI Code Review Report\n\n")
        report.append("**Generated:** $timestamp\n\n")

        report.append("## Base Info\n\n")
        report.append("<details>\n")
        report.append("<summary>info</summary>\n\n")

        if (!repositoryInfo.isNullOrBlank()) {
            report.append("**Repository:** $repositoryInfo\n\n")
        }

        if (!commitMessage.isNullOrBlank()) {
            report.append("### Commit Message\n\n")
            report.append("```\n$commitMessage\n```\n\n")
        }

        report.append("### Changes Summary\n\n")
        report.append(codeChanges.changesSummary)
        report.append("\n")

        if (codeChanges.modifiedFiles.isNotEmpty()) {
            report.append("#### Modified Files\n\n")
            codeChanges.modifiedFiles.forEach { file ->
                report.append("- `$file`\n")
            }
            report.append("\n")
        }

        report.append("</details>\n\n")

        // Main content
        // report.append("## Code Review\n\n")
        report.append(aiReview)
        report.append("\n\n")

        // Diff
        report.append("## Code Changes\n\n")
        report.append("<details>\n")
        report.append("<summary>View Code Diff</summary>\n\n")
        report.append("```diff\n")
        report.append(codeChanges.diff)
        report.append("```\n\n")
        report.append("</details>\n\n")

        report.append("---\n")
        report.append("*Generated by Simple AI Code Reviewer Plugin*\n")

        return report.toString()
    }

    private fun wrapHtmlWithStyles(htmlContent: String): String {
        return """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>AI Code Review Report</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fafafa;
        }
        
        h1, h2, h3 {
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        
        code {
            background-color: #f4f4f4;
            padding: 2px 4px;
            border-radius: 3px;
            font-family: 'Monaco', 'Menlo', monospace;
        }
        
        pre {
            background-color: #f8f8f8;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            overflow-x: auto;
        }
        
        pre code {
            background-color: transparent;
            padding: 0;
        }
        
        blockquote {
            border-left: 4px solid #3498db;
            margin: 0;
            padding-left: 20px;
            color: #666;
        }
        
        ul, ol {
            padding-left: 20px;
        }
        
        li {
            margin: 5px 0;
        }
        
        details {
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
            margin: 10px 0;
        }
        
        summary {
            cursor: pointer;
            font-weight: bold;
            color: #2c3e50;
        }
        
        summary:hover {
            color: #3498db;
        }
        
        .timestamp {
            color: #666;
            font-size: 0.9em;
        }
        
        .footer {
            margin-top: 40px;
            text-align: center;
            color: #999;
            font-size: 0.9em;
        }
    </style>
</head>
<body>
$htmlContent
</body>
</html>
        """.trimIndent()
    }

    private fun extractSummary(aiReview: String): String {
        // Extract first paragraph or first 200 characters as summary
        val lines = aiReview.lines()
        val firstParagraph = lines.takeWhile { it.isNotBlank() }.joinToString(" ")

        return if (firstParagraph.length > 200) {
            firstParagraph.take(197) + "..."
        } else {
            firstParagraph.ifBlank { "AI code review completed" }
        }
    }

    fun saveReportToFile(report: ReviewReport, fileName: String = "ai-code-review-${System.currentTimeMillis()}.md") {
        ApplicationManager.getApplication().runWriteAction {
            try {
                val virtualFile = LightVirtualFile(fileName, report.markdown)
                virtualFile.isWritable = true

                // Open the file in editor
                FileEditorManager.getInstance(project).openFile(virtualFile, true)

            } catch (e: Exception) {
                // If we can't create a virtual file, try to save to project directory
                val projectDir = project.basePath
                if (projectDir != null) {
                    val file = java.io.File(projectDir, fileName)
                    file.writeText(report.markdown)
                }
            }
        }
    }

    fun saveHtmlReportToFile(
        report: ReviewReport,
        fileName: String = "ai-code-review-${System.currentTimeMillis()}.html"
    ) {
        ApplicationManager.getApplication().runWriteAction {
            try {
                val projectDir = project.basePath
                if (projectDir != null) {
                    val file = java.io.File(projectDir, fileName)
                    file.writeText(report.html)
                }
            } catch (e: Exception) {
                // Ignore errors for HTML file saving
            }
        }
    }
}
